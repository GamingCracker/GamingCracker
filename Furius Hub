local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()

local Window = OrionLib:MakeWindow({Name = "Furius | Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})


local Tab = Window:MakeTab({
	Name = "Auto Farm",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local npcName = "" -- variable to store the name of the NPC entered by the user
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function attackNPC(npcName)
    local npc = workspace:WaitForChild("ReplicatedChunks"):FindFirstChild(npcName)
    if npc then
        character:SetPrimaryPartCFrame(npc.PrimaryPart.CFrame * CFrame.new(0,-10,0))
        local args = {
            [1] = game:GetService("Players").LocalPlayer.Character.Punch,
            [2] = npc
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Melee"):FireServer(unpack(args))
    end
end

local function pullNPCs(npcName)
    for _, npc in pairs(workspace:WaitForChild("ReplicatedChunks"):GetChildren()) do
        if npc.Name == npcName then
            local distance = (npc.PrimaryPart.Position - character.HumanoidRootPart.Position).Magnitude
            if distance < 100 then -- adjust this value as needed
                npc:SetPrimaryPartCFrame(character.HumanoidRootPart.CFrame * CFrame.new(0,10,0))
            end
        end
    end
end

Tab:AddTextBox({
    Name = "NPC Name",
    Callback = function(Value)
        npcName = Value
    end
})

Tab:AddToggle({
    Name = "Auto Farm",
    Default = false,
    Callback = function(Value)
        if Value then
            while Value do
                attackNPC(npcName)
                pullNPCs(npcName)
                wait(1)
            end
        end
    end
})

local player = game.Players.LocalPlayer

-- function to check if player has skill
local function hasSkill(player, skillName)
    return player:FindFirstChild(skillName) ~= nil
end

-- function to activate skill
local function activateSkill(player, skillName)
    local skill = Instance.new("BoolValue", player)
    skill.Name = skillName
end

-- check if player has skill and activate it if not
if not hasSkill(player, "IronWill") then
    activateSkill(player, "IronWill")
end

local Tab = Window:MakeTab({
	Name = "Teleport",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})


Tab:AddButton({
    Name = "Pirate Island",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local targetPosition = Vector3.new(1986, 29, 5454)
        character:MoveTo(targetPosition)
    end
})


Tab:AddButton({
    Name = "Sailor Town",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local targetPosition = Vector3.new(2029, 85, 2552)
        character:MoveTo(targetPosition)
    end
})

Tab:AddButton({
    Name = "Pepper Town",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local targetPosition = Vector3.new(-5126, 27, 4319)
        character:MoveTo(targetPosition)
    end
})

Tab:AddButton({
    Name = "Maple Village",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local targetPosition = Vector3.new(-2005,47, 6353)
        character:MoveTo(targetPosition)
    end
})

Tab:AddButton({
    Name = "Fishman Park",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local targetPosition = Vector3.new(-5126, 27, 4319)
        character:MoveTo(targetPosition)
    end
})

Tab:AddButton({
    Name = "Traveler Town",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local targetPosition = Vector3.new(-2289, 31, 2143)
        character:MoveTo(targetPosition)
    end
})

Tab:AddButton({
    Name = "Wreck Rock",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local targetPosition = Vector3.new(-283, 234, 4148)
        character:MoveTo(targetPosition)
    end
})

local Tab = Window:MakeTab({
	Name = "Spawn",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local islands = {"PirateIsland", "SailorTown", "MapleVillage", "FishmanPark", "TravelerTown"}

local function getCurrentIsland()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local position = character.HumanoidRootPart.Position
    for _, island in pairs(islands) do
        local islandPart = workspace:FindFirstChild(island)
        if islandPart then
            local distance = (islandPart.Position - position).Magnitude
            if distance < 31000 then -- adjust this value as needed
                return island
            end
        end
    end
    return nil
end

Tab:AddButton({
    Name = "Spawn Boat on Current Island",
    Callback = function()
        local currentIsland = getCurrentIsland()
        if currentIsland then
            local args = {
                [1] = "Spawn",
                [2] = "Dinghy",
                [3] = currentIsland
            }
            game:GetService("ReplicatedStorage").Remotes.ShipDealer:InvokeServer(unpack(args))
        else
            print("Not on an island")
        end
    end
})


local Tab = Window:MakeTab({
	Name = "Config",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Tab:AddButton({
    Name = "Anti Afk",
    Callback = function()
        local VirtualUser=game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
})





local islands = {"PirateIsland", "SailorTown", "PapperTown", "MapleVillage", "FishmanPark", "TravelerTown"}

local function setSpawn(island)
    local args = {
        [1] = "Spawn",
        [2] = island
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):FireServer(unpack(args))
end

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

character.HumanoidRootPart.Changed:Connect(function()
    local position = character.HumanoidRootPart.Position
    for _, island in pairs(islands) do
        local islandPart = workspace:FindFirstChild(island)
        if islandPart then
            local distance = (islandPart.Position - position).Magnitude
            if distance < 30000 then -- adjust this value as needed
                setSpawn(island)
                break
            end
        end
    end
end)

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player.PlayerGui

local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(0, 200, 0, 50)
textLabel.Position = UDim2.new(0.5, -100, 0.1, 0)
textLabel.TextColor3 = Color3.new(1, 1, 1)
textLabel.BackgroundTransparency = 0.5
textLabel.TextScaled = true
textLabel.Parent = screenGui

while true do
    local position = character.HumanoidRootPart.Position
    textLabel.Text = "X: " .. math.floor(position.X) .. ", Y: " .. math.floor(position.Y) .. ", Z: " .. math.floor(position.Z)
    wait(1)
end
